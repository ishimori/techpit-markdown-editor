{"version":3,"sources":["indexeddb/memo.ts","components/button.tsx","components/save_modal.tsx","components/header.tsx","pages/editor.tsx","pages/history.tsx","index.tsx","hooks/use_state_with_storage.ts"],"names":["database","Dexie","version","stores","memos","table","putMemo","title","text","a","datetime","Date","toISOString","put","StyledButton","styled","button","Button","props","onClick","className","cancel","children","Wrapper","div","Modal","TitleInput","input","Control","SaveModal","onCancel","onSave","useState","setTitle","type","value","onChange","event","target","HeaderWrapper","header","HeaderTitle","HeaderControl","Header","HeaderArea","TextArea","textarea","Preview","Editor","setText","showModal","setShowModal","to","source","Memo","MemoTitle","MemoText","History","setMemos","history","useHistory","useEffect","orderBy","reverse","toArray","then","map","memo","push","GlobalStyle","createGlobalStyle","Main","init","key","localStorage","getItem","setValue","nextValue","setItem","useStateWithStorage","exact","path","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d39a019.chunk.js","sourcesContent":["import Dexie from \"dexie\";\r\n\r\nexport interface MemoRecord {\r\n  datetime: string;\r\n  title: string;\r\n  text: string;\r\n}\r\n\r\nconst database = new Dexie(\"markdown-editor\");\r\ndatabase.version(1).stores({ memos: \"&datetime\" });\r\nconst memos: Dexie.Table<MemoRecord, string> = database.table(\"memos\");\r\n\r\nexport const putMemo = async (title: string, text: string): Promise<void> => {\r\n  const datetime = new Date().toISOString();\r\n  await memos.put({ datetime, title, text });\r\n};\r\n\r\nexport const getMemos = (): Promise<MemoRecord[]> => {\r\n  return memos.orderBy(\"datetime\").reverse().toArray();\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledButton = styled.button`\r\n  background-color: dodgerblue;\r\n  border: none;\r\n  box-shadow: none;\r\n  color: white;\r\n  font-size: 1rem;\r\n  height: 2rem;\r\n  min-width: 5rem;\r\n  padding: 0 1rem;\r\n\r\n  &.cancel {\r\n    background: white;\r\n    border: 1px solid gray;\r\n    color: gray;\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  cancel?: boolean;\r\n  children: string;\r\n  onClick: () => void;\r\n}\r\n\r\nexport const Button: React.FC<Props> = (props) => (\r\n  <StyledButton\r\n    onClick={props.onClick}\r\n    className={props.cancel ? \"cancel\" : \"\"}\r\n  >\r\n    {props.children}\r\n  </StyledButton>\r\n);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"./button\";\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  background-color: #0002;\r\n  bottom: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  position: fixed;\r\n  right: 0;\r\n  top: 0;\r\n`;\r\n\r\nconst Modal = styled.div`\r\n  background: #fff;\r\n  padding: 1rem;\r\n  width: 32rem;\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  width: 29rem;\r\n  padding: 0.5rem;\r\n`;\r\n\r\nconst Control = styled.div`\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  padding: 1rem;\r\n`;\r\ninterface Props {\r\n  onSave: (title: string) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nexport const SaveModal: React.FC<Props> = (props) => {\r\n  const { onCancel, onSave } = props;\r\n  const [title, setTitle] = useState(new Date().toISOString());\r\n  return (\r\n    <Wrapper>\r\n      <Modal>\r\n        <p>テキストの内容を保存します</p>\r\n        <p>保存内容のタイトルを入力して保存ボタンをクリックして下さい</p>\r\n        <p>\r\n          <TitleInput\r\n            type=\"text\"\r\n            value={title}\r\n            onChange={(event) => setTitle(event.target.value)}\r\n          />\r\n        </p>\r\n        <Control>\r\n          <Button onClick={onCancel} cancel>\r\n            キャンセル\r\n          </Button>\r\n          <Button onClick={() => onSave(title)}>保存</Button>\r\n        </Control>\r\n      </Modal>\r\n    </Wrapper>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst HeaderWrapper = styled.header`\r\n  align-content: center;\r\n  display: flex;\r\n  height: 2rem;\r\n  justify-content: space-between;\r\n  line-height: 2rem;\r\n  padding: 0.5rem 1rem;\r\n`;\r\n\r\nconst HeaderTitle = styled.div`\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst HeaderControl = styled.div`\r\n  align-content: center;\r\n  display: flex;\r\n  height: 2rem;\r\n  justify-content: center;\r\n\r\n  & > * {\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\ninterface Props {\r\n  title: string;\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const Header: React.FC<Props> = (props) => (\r\n  <HeaderWrapper>\r\n    <HeaderTitle>{props.title}</HeaderTitle>\r\n    <HeaderControl>{props.children}</HeaderControl>\r\n  </HeaderWrapper>\r\n);\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useStateWithStorage } from \"../hooks/use_state_with_storage\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { putMemo } from \"indexeddb/memo\";\r\nimport { Button } from \"components/button\";\r\nimport { SaveModal } from \"components/save_modal\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Header } from \"../components/header\";\r\n\r\ninterface Props {\r\n  text: string;\r\n  setText: (text: string) => void;\r\n}\r\n\r\nconst Wrapper = styled.div`\r\n  bottom: 0;\r\n  left: 0;\r\n  position: fixed;\r\n  right: 0;\r\n  top: 3rem;\r\n`;\r\nconst HeaderArea = styled.div`\r\n  position: fixed;\r\n  right: 0;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  border-right: 1px solid silver;\r\n  border-top: 1px solid silver;\r\n  bottom: 0;\r\n  font-size: 1rem;\r\n  left: 0;\r\n  padding: 0.5rem;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 50vw;\r\n`;\r\n\r\nconst Preview = styled.div`\r\n  border-top: 1px solid silver;\r\n  bottom: 0;\r\n  overflow-y: scroll;\r\n  padding: 1rem;\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  width: 50vw;\r\n`;\r\n\r\nexport const Editor: React.FC<Props> = (props) => {\r\n  const { text, setText } = props;\r\n  const [showModal, setShowModal] = useState(false);\r\n  return (\r\n    <>\r\n      <HeaderArea>\r\n        <Header title=\"Markdown Editor\">\r\n          <Button onClick={() => setShowModal(true)}>保存する</Button>\r\n          <Link to=\"/history\">履歴を見る</Link>\r\n        </Header>\r\n      </HeaderArea>\r\n      <Wrapper>\r\n        <TextArea\r\n          onChange={(event) => setText(event.target.value)}\r\n          value={text}\r\n        />\r\n        <Preview>\r\n          <ReactMarkdown source={text} />\r\n        </Preview>\r\n      </Wrapper>\r\n      {showModal && (\r\n        <SaveModal\r\n          onSave={(title: string): void => {\r\n            putMemo(title, text);\r\n            setShowModal(false);\r\n          }}\r\n          onCancel={() => setShowModal(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport { Header } from \"../components/header\";\r\nimport { getMemos, MemoRecord } from \"../indexeddb/memo\";\r\nconst HeaderArea = styled.div`\r\n  position: fixed;\r\n  right: 0;\r\n  top: 0;\r\n  left: 0;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  bottom: 0;\r\n  left: 0;\r\n  position: fixed;\r\n  right: 0;\r\n  top: 3rem;\r\n  padding: 0 1rem;\r\n`;\r\n\r\nconst Memo = styled.button`\r\n  display: block;\r\n  background-color: white;\r\n  border: 1px solid gray;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  margin: 1rem 0;\r\n  text-align: left;\r\n`;\r\n\r\nconst MemoTitle = styled.div`\r\n  font-size: 1rem;\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst MemoText = styled.div`\r\n  font-size: 0.85rem;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n`;\r\n\r\ninterface Props {\r\n  setText: (text: string) => void;\r\n}\r\n\r\nexport const History: React.FC<Props> = (props) => {\r\n  const { setText } = props;\r\n  const [memos, setMemos] = useState<MemoRecord[]>([]);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getMemos().then(setMemos);\r\n  }, []);\r\n  return (\r\n    <>\r\n      <HeaderArea>\r\n        <Header title=\"履歴\">\r\n          <Link to=\"editor\">エディタに戻る</Link>\r\n        </Header>\r\n      </HeaderArea>\r\n      <Wrapper>\r\n        TODO:履歴表示\r\n        {memos.map((memo) => (\r\n          <Memo\r\n            key={memo.datetime}\r\n            onClick={() => {\r\n              setText(memo.text);\r\n              history.push(\"/editor\");\r\n            }}\r\n          >\r\n            <MemoTitle>{memo.title}</MemoTitle>\r\n            <MemoText>{memo.text}</MemoText>\r\n          </Memo>\r\n        ))}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n","import * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from \"react-router-dom\";\r\nimport { Editor } from \"./pages/editor\";\r\nimport { History } from \"./pages/history\";\r\nimport { useStateWithStorage } from \"./hooks/use_state_with_storage\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body * {\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nconst StorageKey = \"/editor:text\";\r\n\r\nconst Main: React.FC = () => {\r\n  const [text, setText] = useStateWithStorage(\"\", StorageKey);\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"/editor\">\r\n            <Editor text={text} setText={setText} />\r\n          </Route>\r\n          <Route exact path=\"/history\">\r\n            <History setText={setText} />\r\n          </Route>\r\n          <Redirect to=\"/editor\" path=\"*\" />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n};\r\n\r\nrender(<Main />, document.getElementById(\"root\"));\r\n","import { useState } from \"react\";\r\nexport const useStateWithStorage = (\r\n  init: string,\r\n  key: string\r\n): [string, (s: string) => void] => {\r\n  const [value, setValue] = useState<string>(localStorage.getItem(key) || init);\r\n\r\n  const setValueWithStorage = (nextValue: string): void => {\r\n    setValue(nextValue);\r\n    localStorage.setItem(key, nextValue);\r\n  };\r\n\r\n  return [value, setValueWithStorage];\r\n};\r\n"],"sourceRoot":""}